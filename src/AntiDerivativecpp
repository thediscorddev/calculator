#include "../scr/AntiDerivative.hpp"
std::map<std::string, std::function<std::shared_ptr<Function_Composed>(std::shared_ptr<Function_Composed>)>> AntiDerivative::antiderivativeTable;
std::shared_ptr<Function_Composed> AntiDerivative::antiDerivative(std::shared_ptr<Function> Func_, int level, bool display)
{
    std::shared_ptr<Function_Composed> finalFunction = std::make_shared<Function_Composed>();
    auto Func = std::dynamic_pointer_cast<Function_Composed>(Func_);
    if (!Func)
    {
        if (std::dynamic_pointer_cast<Function_Variable>(Func_) != nullptr)
        {
            // an variable
            // StepLogger::Append("Finding the derivative of ", "Tìm đạo hàm của ", "x", level, display);
            // StepLogger::Append("Derivative of x is ", "Đạo hàm của x là ", "1", level, display);
            std::shared_ptr<Function_Number> one = std::make_shared<Function_Number>();
            std::shared_ptr<Function_Variable> x1 = std::make_shared<Function_Variable>();
            std::shared_ptr<Function_Operation> mul1 = std::make_shared<Function_Operation>();
            mul1->PushOperation("*");
            std::shared_ptr<Function_Operation> mul2 = std::make_shared<Function_Operation>();
            mul2->PushOperation("*");
            x1->PushOperation("x");
            std::shared_ptr<Function_Variable> x2 = std::make_shared<Function_Variable>();
            x2->PushOperation("x");
            one->PushOperation("0.5");
            finalFunction->PushComposed(one);
            finalFunction->PushComposed(mul1);
            finalFunction->PushComposed(x1);
            finalFunction->PushComposed(mul2);
            finalFunction->PushComposed(x2);
            return finalFunction;
        }
        // StepLogger::Append("Finding the derivative of ", "Tìm đạo hàm của ", Func_->GetData(), level, display);
        // StepLogger::Append("For a constant, the derivative is ", "Đối với 1 hằng số, đạo hàm của nó là ", "0", level, display);
        std::shared_ptr<Function_Variable> x1 = std::make_shared<Function_Variable>();
        std::shared_ptr<Function_Operation> mul1 = std::make_shared<Function_Operation>();
        mul1->PushOperation("*");
        x1->PushOperation("x");
        finalFunction->PushComposed(Func_);
        finalFunction->PushComposed(mul1);
        finalFunction->PushComposed(x1);
        return finalFunction;
    }
    StepLogger::Append("Finding the derivative of ", "Tìm đạo hàm của ", Func->toLatexString(), level, display);
    if (Func->GetComposedData().size() == 0)
    {
        //nothing to integrate
        std::shared_ptr<Function_Number> zero = std::make_shared<Function_Number>();
        zero->PushOperation("0");
        finalFunction->PushComposed(Func_);
    }
    else if (Func->GetComposedData().size() == 1)
    {
        auto ptr = std::dynamic_pointer_cast<Function_Composed>(Func->GetComposedData().at(0));
        if (!ptr)
        {
            if (std::dynamic_pointer_cast<Function_Variable>(Func->GetComposedData().at(0)) != nullptr)
            {
                // an variable
                if (Func->GetData() != "ComposedOperationSpecialNoInitalized")
                {
                    //finalFunction->PushComposed(ChainRule(Func, level + 1, display));
                    //inverse chain rules.. or perhaps
                }
                else
                {
                    // StepLogger::Append("Finding the derivative of x", "Tìm đạo hàm của x", "", level);
                    StepLogger::Append("Derivative of x is ", "Đạo hàm của x là ", " 1", level, display);
                    std::shared_ptr<Function_Number> one = std::make_shared<Function_Number>();
                    one->PushOperation("1");
                    finalFunction->PushComposed(one);
                }
            }
            else
            {
                // StepLogger::Append("Finding the derivative of a constant", "Tìm đạo hàm của hằng số", "", level);
                StepLogger::Append("Derivative of a constant is ", "Đạo hàm của 1 hằng số là ", "0", level, display);
                std::shared_ptr<Function_Number> zero = std::make_shared<Function_Number>();
                zero->PushOperation("0");
                finalFunction->PushComposed(zero);
            }
            // Not a composed, a number or an operation
        }
        else
        {
            // the pointer exist
            // Since we only have 1 arg
            if (Func->GetData() == "ComposedOperationSpecialNoInitalized")
                finalFunction->PushComposed(ReverseChainRule(Func->GetComposedData().at(0), level + 1, display)); //
            else
                finalFunction->PushComposed(ReverseChainRule(Func, level + 1, display)); //
        }
    }
    else
    {
        // Has more term
        bool hasAddOrSubStract = false;
        std::string sign = "";
        std::shared_ptr<Function_Composed> Arg = std::make_shared<Function_Composed>();
        if (Func->GetData() == "ComposedOperationSpecialNoInitalized")
        {
            for (auto &a : Func->GetComposedData())
            {
                if (!a)
                    continue;
                auto ptr = std::dynamic_pointer_cast<Function_Operation>(a);
                if (ptr)
                {
                    if (ptr->GetData() == "+" || ptr->GetData() == "-")
                    {
                        if (sign != "")
                        {
                            std::shared_ptr<Function_Operation> sign_ = std::make_shared<Function_Operation>();
                            sign_->PushOperation(sign);
                            finalFunction->PushComposed(sign_);
                        }
                        finalFunction->PushComposed(Derivative(Arg, level + 1, display));
                        hasAddOrSubStract = true;
                        sign = ptr->GetData();
                        // clean the arg
                        Arg = std::make_shared<Function_Composed>();
                    }
                    else
                        Arg->PushComposed(a);
                }
                else
                    Arg->PushComposed(a);
            }
            if (hasAddOrSubStract)
            {
                if (Arg->GetComposedData().size() > 0)
                {
                    if (sign != "")
                    {
                        std::shared_ptr<Function_Operation> sign_ = std::make_shared<Function_Operation>();
                        sign_->PushOperation(sign);
                        finalFunction->PushComposed(sign_);
                    }
                    finalFunction->PushComposed(Derivative(Arg, level + 1, display));
                    hasAddOrSubStract = false;
                    // clean the arg
                    Arg = std::make_shared<Function_Composed>();
                }
            }
            else
            {
                // What we did is just a bunch of * and / operation
                // We should move around
                // once we move around
                if (Arg->GetComposedData().size() >= 3)
                {
                    auto ptr = std::dynamic_pointer_cast<Function_Operation>(Arg->GetComposedData().at(1));
                    if (ptr)
                    {
                        if (ptr->GetData() == "*")
                        {
                            finalFunction->PushComposed(ProductRule(Arg, level + 1, display));
                            // chain rule
                        }
                        else if (ptr->GetData() == "/")
                        {
                            finalFunction->PushComposed(QuotientRule(Arg, level + 1, display));
                            // quotient rule
                        }
                    }
                    else
                        throw std::runtime_error("Syntax error.");
                }
            }
        }
        else
        {
            // We will combine the inner function into 1 BIG function
            for (auto &a : Func->GetComposedData())
            {
                if (!a)
                    continue;
                Arg->PushComposed(a);
            }
            finalFunction->PushComposed(ChainRule(Func, level + 1, display));
        }
    }
    return finalFunction;
}